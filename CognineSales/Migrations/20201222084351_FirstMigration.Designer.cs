// <auto-generated />
using System;
using CognineSales.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CognineSales.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20201222084351_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CognineSales.Models.AllUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("RollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RollId");

                    b.ToTable("AllUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "DMart1@gmail.com",
                            Name = "DMart1",
                            Password = "DMart12",
                            RollId = 4
                        },
                        new
                        {
                            Id = 2,
                            Email = "DMart2@gmail.com",
                            Name = "DMart2",
                            Password = "DMart24",
                            RollId = 4
                        },
                        new
                        {
                            Id = 3,
                            Email = "DMart3@gmail.com",
                            Name = "DMart3",
                            Password = "DMart31",
                            RollId = 4
                        },
                        new
                        {
                            Id = 4,
                            Email = "DMart4@gmail.com",
                            Name = "DMart4",
                            Password = "DMart42",
                            RollId = 4
                        },
                        new
                        {
                            Id = 5,
                            Email = "Admin@Cognine.com",
                            Name = "Admin",
                            Password = "@dmin12",
                            RollId = 1
                        },
                        new
                        {
                            Id = 6,
                            Email = "sudha@Cognine.com",
                            Name = "Vulluri Sudhakar",
                            Password = "Sudha@12",
                            RollId = 2
                        },
                        new
                        {
                            Id = 7,
                            Email = "Staff1@Cognine.com",
                            Name = "Staff 1",
                            Password = "Staff@12",
                            RollId = 3
                        },
                        new
                        {
                            Id = 8,
                            Email = "Staff1@Cognine.com",
                            Name = "Staff 2",
                            Password = "Staff@24",
                            RollId = 3
                        });
                });

            modelBuilder.Entity("CognineSales.Models.Brands", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Levis"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Denim"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Realme"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Redmi"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "LG"
                        },
                        new
                        {
                            BrandId = 6,
                            BrandName = "Samsung"
                        },
                        new
                        {
                            BrandId = 7,
                            BrandName = "Asus"
                        },
                        new
                        {
                            BrandId = 8,
                            BrandName = "Lenovo"
                        });
                });

            modelBuilder.Entity("CognineSales.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Fashion"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Mobiles"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "HomeAppliances"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Electronics"
                        });
                });

            modelBuilder.Entity("CognineSales.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerId = 6,
                            City = "Madhapur",
                            Country = "India",
                            FirstName = "Vulluri",
                            Gender = "Male",
                            IsActive = true,
                            LastName = "Sudhakar",
                            Phone = 8108108101L,
                            PinCode = 500058,
                            State = "Telangana",
                            Street = "ABC"
                        });
                });

            modelBuilder.Entity("CognineSales.Models.OrderItems", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("ListPrice")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CognineSales.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequriedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CognineSales.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ListPrice")
                        .HasColumnType("int");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ListPrice = 999,
                            ModelYear = 2020,
                            ProductName = "LevisShirts"
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            ListPrice = 2000,
                            ModelYear = 2020,
                            ProductName = "LevisJeans"
                        },
                        new
                        {
                            ProductId = 3,
                            BrandId = 2,
                            CategoryId = 1,
                            ListPrice = 999,
                            ModelYear = 2020,
                            ProductName = "DenimJeans"
                        },
                        new
                        {
                            ProductId = 4,
                            BrandId = 2,
                            CategoryId = 1,
                            ListPrice = 2000,
                            ModelYear = 2020,
                            ProductName = "DenimShirts"
                        },
                        new
                        {
                            ProductId = 5,
                            BrandId = 3,
                            CategoryId = 2,
                            ListPrice = 23000,
                            ModelYear = 2020,
                            ProductName = "RealmeX3"
                        },
                        new
                        {
                            ProductId = 6,
                            BrandId = 3,
                            CategoryId = 2,
                            ListPrice = 12000,
                            ModelYear = 2020,
                            ProductName = "RealmeNarzo20"
                        },
                        new
                        {
                            ProductId = 7,
                            BrandId = 4,
                            CategoryId = 2,
                            ListPrice = 20000,
                            ModelYear = 2020,
                            ProductName = "RedmiK20pro"
                        },
                        new
                        {
                            ProductId = 8,
                            BrandId = 4,
                            CategoryId = 2,
                            ListPrice = 2500,
                            ModelYear = 2020,
                            ProductName = "RedmiNote10"
                        },
                        new
                        {
                            ProductId = 9,
                            BrandId = 5,
                            CategoryId = 3,
                            ListPrice = 12000,
                            ModelYear = 2020,
                            ProductName = "AndroidTV"
                        },
                        new
                        {
                            ProductId = 10,
                            BrandId = 5,
                            CategoryId = 3,
                            ListPrice = 20000,
                            ModelYear = 2020,
                            ProductName = "WashingMachine"
                        },
                        new
                        {
                            ProductId = 11,
                            BrandId = 6,
                            CategoryId = 3,
                            ListPrice = 25000,
                            ModelYear = 2020,
                            ProductName = "Refridgerator"
                        },
                        new
                        {
                            ProductId = 12,
                            BrandId = 6,
                            CategoryId = 3,
                            ListPrice = 14500,
                            ModelYear = 2020,
                            ProductName = "HomeTheater"
                        },
                        new
                        {
                            ProductId = 13,
                            BrandId = 7,
                            CategoryId = 4,
                            ListPrice = 35000,
                            ModelYear = 2020,
                            ProductName = "Asus VivoBook14"
                        },
                        new
                        {
                            ProductId = 14,
                            BrandId = 7,
                            CategoryId = 4,
                            ListPrice = 60000,
                            ModelYear = 2020,
                            ProductName = "Asus Tuf"
                        },
                        new
                        {
                            ProductId = 15,
                            BrandId = 8,
                            CategoryId = 4,
                            ListPrice = 10000,
                            ModelYear = 2020,
                            ProductName = "LenovoSmartWatches"
                        },
                        new
                        {
                            ProductId = 16,
                            BrandId = 8,
                            CategoryId = 4,
                            ListPrice = 9000,
                            ModelYear = 2020,
                            ProductName = "LenovoGamepad"
                        });
                });

            modelBuilder.Entity("CognineSales.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RollName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RollName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RollName = "User"
                        },
                        new
                        {
                            Id = 3,
                            RollName = "Staff"
                        },
                        new
                        {
                            Id = 4,
                            RollName = "Store"
                        });
                });

            modelBuilder.Entity("CognineSales.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffId = 7,
                            Active = true,
                            City = "Madhapur",
                            Country = "India",
                            FirstName = "Staff",
                            Gender = "Male",
                            LastName = "1",
                            Phone = 8108108101L,
                            PinCode = 500058,
                            State = "Telangana",
                            StoreId = 1,
                            Street = "ABC"
                        },
                        new
                        {
                            StaffId = 8,
                            Active = true,
                            City = "Madhapur",
                            Country = "India",
                            FirstName = "DMart",
                            Gender = "Male",
                            LastName = "2",
                            Phone = 9008108102L,
                            PinCode = 500059,
                            State = "Telangana",
                            StoreId = 2,
                            Street = "JBL"
                        });
                });

            modelBuilder.Entity("CognineSales.Models.Stocks", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ProductId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 2,
                            Quantity = 12
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 3,
                            Quantity = 15
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 4,
                            Quantity = 22
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 5,
                            Quantity = 42
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 6,
                            Quantity = 2
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 7,
                            Quantity = 8
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 8,
                            Quantity = 9
                        },
                        new
                        {
                            StoreId = 3,
                            ProductId = 9,
                            Quantity = 22
                        },
                        new
                        {
                            StoreId = 3,
                            ProductId = 10,
                            Quantity = 21
                        },
                        new
                        {
                            StoreId = 3,
                            ProductId = 11,
                            Quantity = 32
                        },
                        new
                        {
                            StoreId = 3,
                            ProductId = 12,
                            Quantity = 22
                        },
                        new
                        {
                            StoreId = 4,
                            ProductId = 13,
                            Quantity = 12
                        },
                        new
                        {
                            StoreId = 4,
                            ProductId = 14,
                            Quantity = 12
                        },
                        new
                        {
                            StoreId = 4,
                            ProductId = 15,
                            Quantity = 16
                        },
                        new
                        {
                            StoreId = 4,
                            ProductId = 16,
                            Quantity = 19
                        });
                });

            modelBuilder.Entity("CognineSales.Models.Stores", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            City = "Madhapur",
                            Country = "India",
                            IsActive = true,
                            Name = "DMart1",
                            Phone = 8108108101L,
                            PinCode = 500058,
                            State = "Telangana",
                            Street = "ABC"
                        },
                        new
                        {
                            StoreId = 2,
                            City = "Madhapur",
                            Country = "India",
                            IsActive = true,
                            Name = "DMart2",
                            Phone = 9008108102L,
                            PinCode = 500059,
                            State = "Telangana",
                            Street = "JBL"
                        },
                        new
                        {
                            StoreId = 3,
                            City = "Madhapur",
                            Country = "India",
                            IsActive = true,
                            Name = "DMart3",
                            Phone = 7608108103L,
                            PinCode = 500060,
                            State = "Telangana",
                            Street = "DEF"
                        },
                        new
                        {
                            StoreId = 4,
                            City = "Madhapur",
                            Country = "India",
                            IsActive = true,
                            Name = "DMart4",
                            Phone = 98108108104L,
                            PinCode = 500051,
                            State = "Telangana",
                            Street = "XYZ"
                        });
                });

            modelBuilder.Entity("CognineSales.Models.AllUsers", b =>
                {
                    b.HasOne("CognineSales.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CognineSales.Models.Customer", b =>
                {
                    b.HasOne("CognineSales.Models.AllUsers", "AllUsers")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllUsers");
                });

            modelBuilder.Entity("CognineSales.Models.OrderItems", b =>
                {
                    b.HasOne("CognineSales.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CognineSales.Models.Products", "Products")
                        .WithMany("Order")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CognineSales.Models.Orders", b =>
                {
                    b.HasOne("CognineSales.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CognineSales.Models.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CognineSales.Models.Stores", "Stores")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("CognineSales.Models.Products", b =>
                {
                    b.HasOne("CognineSales.Models.Brands", "Brands")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CognineSales.Models.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("CognineSales.Models.Staff", b =>
                {
                    b.HasOne("CognineSales.Models.Staff", "Manager")
                        .WithMany("Staffs")
                        .HasForeignKey("ManagerId");

                    b.HasOne("CognineSales.Models.AllUsers", "AllUsers")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CognineSales.Models.Stores", "Stores")
                        .WithMany("Staff")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllUsers");

                    b.Navigation("Manager");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("CognineSales.Models.Stocks", b =>
                {
                    b.HasOne("CognineSales.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CognineSales.Models.Stores", "Stores")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("CognineSales.Models.Stores", b =>
                {
                    b.HasOne("CognineSales.Models.AllUsers", "AllUsers")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllUsers");
                });

            modelBuilder.Entity("CognineSales.Models.Brands", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CognineSales.Models.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CognineSales.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CognineSales.Models.Products", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("CognineSales.Models.Staff", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("CognineSales.Models.Stores", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
